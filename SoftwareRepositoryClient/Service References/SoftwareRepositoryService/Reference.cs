//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoftwareRepositoryClient.SoftwareRepositoryService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PackageInfo", Namespace="http://schemas.datacontract.org/2004/07/SoftwareRepositoryServer")]
    [System.SerializableAttribute()]
    public partial class PackageInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VersionValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fileNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CreationDateField, value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VersionValue {
            get {
                return this.VersionValueField;
            }
            set {
                if ((this.VersionValueField.Equals(value) != true)) {
                    this.VersionValueField = value;
                    this.RaisePropertyChanged("VersionValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.fileNameField, value) != true)) {
                    this.fileNameField = value;
                    this.RaisePropertyChanged("fileName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SoftwareRepositoryService.IRepositoryService")]
    public interface IRepositoryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryService/GetPackages", ReplyAction="http://tempuri.org/IRepositoryService/GetPackagesResponse")]
        SoftwareRepositoryClient.SoftwareRepositoryService.PackageInfo[] GetPackages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryService/CheckInPackages", ReplyAction="http://tempuri.org/IRepositoryService/CheckInPackagesResponse")]
        int CheckInPackages(System.IO.FileInfo filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryService/UploadPackages", ReplyAction="http://tempuri.org/IRepositoryService/UploadPackagesResponse")]
        bool UploadPackages(string file, byte[] data, bool firstime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryService/AuthenticateUser", ReplyAction="http://tempuri.org/IRepositoryService/AuthenticateUserResponse")]
        bool AuthenticateUser(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryService/IsRI", ReplyAction="http://tempuri.org/IRepositoryService/IsRIResponse")]
        bool IsRI(string filename, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryService/CreateDownloadList", ReplyAction="http://tempuri.org/IRepositoryService/CreateDownloadListResponse")]
        string[] CreateDownloadList(string pname, string fname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryService/CanCancelOpenCheckIn", ReplyAction="http://tempuri.org/IRepositoryService/CanCancelOpenCheckInResponse")]
        bool CanCancelOpenCheckIn(string filename, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryService/CancelOpenCheckIn", ReplyAction="http://tempuri.org/IRepositoryService/CancelOpenCheckInResponse")]
        bool CancelOpenCheckIn(string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryService/InitiateDownload", ReplyAction="http://tempuri.org/IRepositoryService/InitiateDownloadResponse")]
        void InitiateDownload(string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryService/DownloadPackage", ReplyAction="http://tempuri.org/IRepositoryService/DownloadPackageResponse")]
        byte[] DownloadPackage();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepositoryService/CloseDownload", ReplyAction="http://tempuri.org/IRepositoryService/CloseDownloadResponse")]
        void CloseDownload();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRepositoryServiceChannel : SoftwareRepositoryClient.SoftwareRepositoryService.IRepositoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RepositoryServiceClient : System.ServiceModel.ClientBase<SoftwareRepositoryClient.SoftwareRepositoryService.IRepositoryService>, SoftwareRepositoryClient.SoftwareRepositoryService.IRepositoryService {
        
        public RepositoryServiceClient() {
        }
        
        public RepositoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RepositoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RepositoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RepositoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SoftwareRepositoryClient.SoftwareRepositoryService.PackageInfo[] GetPackages() {
            return base.Channel.GetPackages();
        }
        
        public int CheckInPackages(System.IO.FileInfo filename) {
            return base.Channel.CheckInPackages(filename);
        }
        
        public bool UploadPackages(string file, byte[] data, bool firstime) {
            return base.Channel.UploadPackages(file, data, firstime);
        }
        
        public bool AuthenticateUser(string Username, string Password) {
            return base.Channel.AuthenticateUser(Username, Password);
        }
        
        public bool IsRI(string filename, string username) {
            return base.Channel.IsRI(filename, username);
        }
        
        public string[] CreateDownloadList(string pname, string fname) {
            return base.Channel.CreateDownloadList(pname, fname);
        }
        
        public bool CanCancelOpenCheckIn(string filename, string username) {
            return base.Channel.CanCancelOpenCheckIn(filename, username);
        }
        
        public bool CancelOpenCheckIn(string filename) {
            return base.Channel.CancelOpenCheckIn(filename);
        }
        
        public void InitiateDownload(string filename) {
            base.Channel.InitiateDownload(filename);
        }
        
        public byte[] DownloadPackage() {
            return base.Channel.DownloadPackage();
        }
        
        public void CloseDownload() {
            base.Channel.CloseDownload();
        }
    }
}
